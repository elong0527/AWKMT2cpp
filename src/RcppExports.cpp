// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/AWKMT2cpp.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// AWKMT2_eigen
List AWKMT2_eigen(Eigen::Map<Eigen::ArrayXd> t_idx, Eigen::Map<Eigen::ArrayXd> status0, Eigen::Map<Eigen::ArrayXd> status1, Eigen::Map<Eigen::ArrayXd> x0, Eigen::Map<Eigen::ArrayXd> x1, double tau1, double tau2, Eigen::Map<Eigen::ArrayXd> crange, CharacterVector test, CharacterVector type, int nmethod);
static SEXP AWKMT2cpp_AWKMT2_eigen_try(SEXP t_idxSEXP, SEXP status0SEXP, SEXP status1SEXP, SEXP x0SEXP, SEXP x1SEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP crangeSEXP, SEXP testSEXP, SEXP typeSEXP, SEXP nmethodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type t_idx(t_idxSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type status0(status0SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type status1(status1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type crange(crangeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type test(testSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type nmethod(nmethodSEXP);
    rcpp_result_gen = Rcpp::wrap(AWKMT2_eigen(t_idx, status0, status1, x0, x1, tau1, tau2, crange, test, type, nmethod));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP AWKMT2cpp_AWKMT2_eigen(SEXP t_idxSEXP, SEXP status0SEXP, SEXP status1SEXP, SEXP x0SEXP, SEXP x1SEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP crangeSEXP, SEXP testSEXP, SEXP typeSEXP, SEXP nmethodSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(AWKMT2cpp_AWKMT2_eigen_try(t_idxSEXP, status0SEXP, status1SEXP, x0SEXP, x1SEXP, tau1SEXP, tau2SEXP, crangeSEXP, testSEXP, typeSEXP, nmethodSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int AWKMT2cpp_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*AWKMT2_eigen)(Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,double,double,Eigen::Map<Eigen::ArrayXd>,CharacterVector,CharacterVector,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP AWKMT2cpp_RcppExport_registerCCallable() { 
    R_RegisterCCallable("AWKMT2cpp", "AWKMT2cpp_AWKMT2_eigen", (DL_FUNC)AWKMT2cpp_AWKMT2_eigen_try);
    R_RegisterCCallable("AWKMT2cpp", "AWKMT2cpp_RcppExport_validate", (DL_FUNC)AWKMT2cpp_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"AWKMT2cpp_AWKMT2_eigen", (DL_FUNC) &AWKMT2cpp_AWKMT2_eigen, 11},
    {"AWKMT2cpp_RcppExport_registerCCallable", (DL_FUNC) &AWKMT2cpp_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_AWKMT2cpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
