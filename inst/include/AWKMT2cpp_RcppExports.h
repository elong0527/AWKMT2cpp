// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_AWKMT2cpp_RCPPEXPORTS_H_GEN_
#define RCPP_AWKMT2cpp_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace AWKMT2cpp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("AWKMT2cpp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("AWKMT2cpp", "AWKMT2cpp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in AWKMT2cpp");
            }
        }
    }

    inline List AWKMT2_eigen(Eigen::Map<Eigen::ArrayXd> t_idx, Eigen::Map<Eigen::ArrayXd> status0, Eigen::Map<Eigen::ArrayXd> status1, Eigen::Map<Eigen::ArrayXd> x0, Eigen::Map<Eigen::ArrayXd> x1, double tau1, double tau2, Eigen::Map<Eigen::ArrayXd> crange, CharacterVector test, CharacterVector type, int nmethod) {
        typedef SEXP(*Ptr_AWKMT2_eigen)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_AWKMT2_eigen p_AWKMT2_eigen = NULL;
        if (p_AWKMT2_eigen == NULL) {
            validateSignature("List(*AWKMT2_eigen)(Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,Eigen::Map<Eigen::ArrayXd>,double,double,Eigen::Map<Eigen::ArrayXd>,CharacterVector,CharacterVector,int)");
            p_AWKMT2_eigen = (Ptr_AWKMT2_eigen)R_GetCCallable("AWKMT2cpp", "AWKMT2cpp_AWKMT2_eigen");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_AWKMT2_eigen(Rcpp::wrap(t_idx), Rcpp::wrap(status0), Rcpp::wrap(status1), Rcpp::wrap(x0), Rcpp::wrap(x1), Rcpp::wrap(tau1), Rcpp::wrap(tau2), Rcpp::wrap(crange), Rcpp::wrap(test), Rcpp::wrap(type), Rcpp::wrap(nmethod));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_AWKMT2cpp_RCPPEXPORTS_H_GEN_
